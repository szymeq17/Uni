#lang racket
(require "leftist.rkt")
(require rackunit)
(require rackunit/text-ui)
(provide heapsort)

;;; check that a list is sorted (useful for longish lists)
(define (sorted? xs)
  (cond [(null? xs)              true]
        [(null? (cdr xs))        true]
        [(<= (car xs) (cadr xs)) (sorted? (cdr xs))]
        [else                    false]))

;HEAP SORT:
(define (heap-sort xs)
  (define (list-to-heap xs h)
    (if (null? xs)
         h
        (list-to-heap (cdr xs) (heap-insert (make-elem (car xs) (car xs)) h))))
  (define (heap-to-list h)
    ;wyciąga najmniejszy element z kopca i wkłada do listy, a później usuwa go z kopca
    ;dopóki kopiec nie jest pusty
    (if (heap-empty? h)
        null
        (cons (elem-priority (heap-min h)) (heap-to-list (heap-pop h)))))
  (heap-to-list (list-to-heap xs empty-heap)))

;TESTY:
(define heap-sort-tests
  (test-suite "heap-sort-procedure-tests"
              (test-case "heap-sort-test-number-1"
                         (sorted? (heap-sort (list))))
             
              (test-case "heap-sort-test-number-2"
                         (sorted? (heap-sort (list 1 2 3 4 5 6 7))))
             
              (test-case "heap-sort-test-number-3"
                         (sorted? (heap-sort (list 0 0 0 0 0 0 0))))
           
              (test-case "heap-sort-test-number-4"
                         (sorted? (heap-sort (list 1 -1 1 -1 1 -1 ))))
             
              (test-case "heap-sort-test-number-5"
                         (sorted? (heap-sort (list 6 5 4 3 2 1))))
             
              (test-case "heap-sort-test-number-6"
                         (sorted? (heap-sort (list 1 23 8 -49 29 12 1 2 391 20 102 20 10 102 -1000))))
             
              (test-case "heap-sort-test-number-7"
                         (sorted? (heap-sort (list 2 1 3 2 1 3 2 1 3)))) 
              ))
 
(run-tests heap-sort-tests)
        










        